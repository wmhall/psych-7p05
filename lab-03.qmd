---
title: "Lab 03: `dplyr`"
format: gfm
---

```{r}
#| label: setup
#| include: false
#| cache: false
knitr::opts_chunk$set(error = TRUE)
```

### Before you start

If you haven't worked through [lab 1](lab-01.md) and [lab 2](lab-02.md), go ahead and finish those first.

### Intro

`dplyr` is a `tidyverse` package for data manipulation. It is built to be fast while also resulting in highly readable code. It was initially developed by Hadley Wickham and Romain Francois.

`dplyr`'s roots are in an earlier, still-very-useful package called [`plyr`](http://plyr.had.co.nz). Where `plyr` covers a diverse set of inputs and outputs (e.g., arrays, data.frames, lists), `dplyr` has a laser-like focus on data frames.

#### Load `tidyverse` and `gapminder`

```{r}
#| message: false
library(tidyverse)
library(gapminder)
```

#### Load the Gapminder data

Take a quick look at the Gapminder data frame.

```{r}
str(gapminder)
head(gapminder)
```

### Use `filter()` to subset data row-wise.

`filter()` takes logical expressions and returns the rows for which all are `TRUE`.

```{r}
filter(gapminder, lifeExp < 29)
filter(gapminder, country == "Rwanda")
filter(gapminder, country %in% c("Rwanda", "Afghanistan"))
```

Compare with some base R code to accomplish the same things

```{r}
#| eval: false
gapminder[gapminder$lifeExp < 29, ] ## repeat `gapminder`, [i, j] indexing is distracting
subset(gapminder, country == "Rwanda") ## almost same as filter ... but wait ...
```

### Meet the new pipe operator

Before we go any further, we should exploit the pipe operator. This is going to change your data analytical life. You no longer need to enact multi-operation commands by nesting them inside each other, like so many [Russian nesting dolls](https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/Floral_matryoshka_set_2_smallest_doll_nested.JPG/1024px-Floral_matryoshka_set_2_smallest_doll_nested.JPG). This new syntax leads to code that is much easier to write and to read.

Here's what it looks like: `|>`. The RStudio keyboard shortcut: Ctrl + Shift + M (Windows), Cmd + Shift + M (Mac).

Let's demo then I'll explain:

```{r}
gapminder |> head()
```

This is equivalent to `head(gapminder)`. This pipe operator takes the thing on the left-hand-side and **pipes** it into the function call on the right-hand-side -- literally, drops it in as the first argument.

Never fear, you can still specify other arguments to this function! To see the first 3 rows of Gapminder, we could say `head(gapminder, 3)` or this:

```{r}
gapminder |> head(3)
```

Whenever you see the assignment operator (`<-`), you might think to your self "gets". Similarly, you should think "and then", whenever you see the pipe operator, `|>`.

You are probably not impressed yet, but the magic will soon happen.

### Use `select()` to subset the data on variables or columns.

Back to `dplyr` ...

Use `select()` to subset the data on variables or columns. Here's a conventional call:

```{r}
select(gapminder, year, lifeExp) ## tbl_df prevents TMI from printing
```

And here's a similar operation, but written with the pipe operator and piped through `head`:

```{r}
gapminder |>
  select(year, lifeExp) |>
  head(4)
```

Think: "Take `gapminder`, *and then* select the variables year and lifeExp, *and then* show the first 4 rows."

### Revel in the convenience

Here's the data for Canada, but only certain variables:

```{r}
gapminder |>
  filter(country == "Canada") |>
  select(year, lifeExp)
```

and what a typical base R call would look like:

```{r}
gapminder[gapminder$country == "Canada", c("year", "lifeExp")]
```

or, possibly?, a nicer look using base R's `subset()` function:

```{r}
subset(gapminder, country == "Canada", select = c(year, lifeExp))
```

### Pause to reflect

We've barely scratched the surface of `dplyr` but I want to point out something you may start to appreciate: These functions take the same flavor of object as input and output. Namely, a `data.frame` or one of the other data receptacles `dplyr` supports. And finally, the data is **always** the very first argument of the verb functions.

This set of deliberate design choices, together with the pipe operator, produces a highly effective, low friction tools for data analysis.

### Use `mutate()` to add new variables

Imagine we wanted to recover each country's GDP. After all, the Gapminder data has a variable for population and GDP per capita. Let's multiply them together.

```{r}
gapminder_gdp <- gapminder |>
  mutate(gdp = pop * gdpPercap)
```

Hmmmm ... those GDP numbers are almost uselessly large and abstract. Consider the [advice of Randall Munroe of xkcd](http://fivethirtyeight.com/datalab/xkcd-randall-munroe-qanda-what-if/): "One thing that bothers me is large numbers presented without context... 'If I added a zero to this number, would the sentence containing it mean something different to me?' If the answer is 'no,' maybe the number has no business being in the sentence in the first place."

Maybe it would be more meaningful to report GDP per capita in billions. Lets give it a try.

```{r}

gapminder_gdp_billions <- 
gapminder |>
  mutate(gdp_billion = gdpPercap*pop/10^9)
  

```

### Use `arrange()` to row-order data in a principled way

Imagine you wanted this data ordered by the variable you just made.

```{r}
gapminder_gdp_billions |>
  arrange(gdp_billion)
```

Or maybe you want just the data from 2007, sorted on life expectancy?

```{r}
gapminder |>
  filter(year == 2007) |>
  arrange(lifeExp)
```

Oh, you'd like to sort on life expectancy in descending order? Then use `desc()`.

```{r}
gapminder |>
  filter(year == 2007) |>
  arrange(desc(lifeExp))
```

I advise that your analyses NEVER rely on rows or variables being in a specific order. But it's still true that human beings write the code and the interactive development process can be much nicer if you reorder the rows of your data as you go along. Also, once you are preparing tables for human eyeballs, it is imperative that you step up and take control of row order.

### Use `rename()` to rename variables

Notice that the Gapminder excerpt has variables in [`camelCase`](http://en.wikipedia.org/wiki/CamelCase), but what if we want them in [`snake_case`](http://en.wikipedia.org/wiki/Snake_case). Let's rename some variables!

```{r}
gapminder_snake_case <- 
gapminder |>
  rename(life_exp = lifeExp,
         gdp_percap = gdpPercap)
```

You can also use `select()` to **select and rename** variables, but notice the difference between the resulting data frames.

```{r}
gapminder |>
  select(life_exp = lifeExp,
         gdp_percap = gdpPercap)
```

### `group_by()` is a mighty weapon

When combined with `group_by()`, the `dplyr` verbs you allow you to solve an extremely diverse set of problems with relative ease.

For example, combination of `group_by()` and `summarize()` can be very powerful.

Remember:

-   `group_by()` adds extra structure to your dataset -- grouping information -- which lays the groundwork for computations within the groups.
-   `summarize()` takes a dataset with $n$ observations, computes requested summaries, and returns a dataset with 1 observation.

#### Counting things up

Let's start with simple counting. How many observations do we have per continent?

```{r}
gapminder |>
  group_by(continent) |>
  summarize(n_obs = n())
```

The `count()` function is a convenience function for this sort of thing.

```{r}
gapminder |>
  group_by(continent) |>
  count()
```

What if we wanted to add the number of unique countries for each continent?

```{r}
gapminder |>
  group_by(continent) |>
  summarize(n_obs = n(),
            n_countries = n_distinct(country))
```

#### General summarization

The functions you'll apply within `summarize()` include classical statistical summaries, like `mean()`, `median()`, `sd()`, and `IQR`. Remember they are functions that take $n$ inputs and distill them down into 1 output.

Let's compute the average life expectancy by continent.

```{r}
gapminder |>
  group_by(continent) |>
  summarize(avg_lifeExp = mean(lifeExp))
```

We can compute other types of statistics using `summarize()`. Let's say we wanted to focus on Europe and ask what are the minimum and maximum life expectancies seen by year, we could use code like this:

```{r}
gapminder |>
  filter(continent == "Europe") |>
  group_by(year) |>
  summarize(min_lifeExp = min(lifeExp), max_lifeExp = max(lifeExp))
```

Of course it would be much more interesting to see *which* countries contribute these extreme observations. Is the minimum (maximum) always coming from the same country?

Lets consider the whole dataset and find out if certain countries look like they are over-represented in having the lowest life expectancy each year of data collection. The code below will help you do this.

```{r}
gapminder |> 
  group_by(year) |> 
  filter(lifeExp == min(lifeExp)) |> 
  group_by(country) |> 
  count() |> 
  arrange(desc(n))
```

To understand how the code is working, run small chunks of it. The key line using the `filter()` to find the lowest life expectancy for each group of years.

`count()` then lets you see if certain countries are occurring more frequently than others.

We could ask the same question about countries with the highest life expectancy.

```{r}
gapminder |> 
  group_by(year) |> 
  filter(lifeExp == max(lifeExp)) |> 
  group_by(country) |> 
  count() |> 
  arrange(desc(n))
```

Ponder the minimum life expectancy data for a moment. The subject matter and the code. Mostly you're seeing what genocide looks like in dry statistics on average life expectancy.

Break the code into pieces, starting at the top, and inspect the intermediate results. That's certainly how I was able to *write* such a thing. These commands do not [leap fully formed out of anyone's forehead](http://tinyurl.com/athenaforehead) -- they are built up gradually, with lots of errors and refinements along the way. I'm not even sure it's a great idea to do so much manipulation in one fell swoop. Is the statement above really hard for you to read? If yes, then by all means break it into pieces and make some intermediate objects. Your code should be easy to write and read when you're done.

### But I want to do more!

I've introduced you to six (maybe more?) `dplyr()` verbs, but this is just the start of your journey. You should spend time practicing with the functions I taught you. When you feel ready, take a look at some of the functions below to move things to the next level:

-   Master `select()` by getting to know the [selection helpers](https://tidyselect.r-lib.org/reference/starts_with.html).
-   Supercharge `summarize()` with [`across()`](https://dplyr.tidyverse.org/articles/colwise.html).
-   Get to know [`rowwise()`](https://dplyr.tidyverse.org/articles/rowwise.html)
-   Explore [distinct()](https://dplyr.tidyverse.org/reference/distinct.html).

### Resources

`dplyr` stuff

-   `dplyr()` tidyverse [webpage](https://dplyr.tidyverse.org/)

-   `dplyr()` [vingette](https://dplyr.tidyverse.org/articles/dplyr.html) on the tidyverse webpage

-   `dplyr()` section of your [textbook](https://r4ds.hadley.nz/data-transform)
