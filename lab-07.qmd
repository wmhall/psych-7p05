---
title: "Lab 7: Strings"
format:
  gfm:
    toc: true
---

```{r}
#| label: setup
#| include: false
#| cache: false
knitr::opts_chunk$set(error = TRUE)
library(tidyverse)
```


## Overview

This lab will show you a few functions from `stringr` that we didn't have time to cover in the lecture. 

## `stringr`

### String splitting by delimiter

You can use `str_split()` to split strings by a delimiter. 

Here we split on a single space `" "`.


```{r}
#| label: eval
str_split(fruit, pattern = " ") |> 
  head(5)
```

We get a *list* back. This can be a bit annoying to work with, but it must be so! `str_split()` must return list because who knows how many pieces there will be? Thus, you need something that can house vectors of different lengths. 

Take a close look a the list and make sure you understand what `str_split()` is doing.

If you are willing to commit to the number of pieces, you can use `str_split_fixed()` and get a character matrix. 

```{r}
str_split_fixed(fruit, pattern = " ", n = 2) |> 
  head(5)
```

Check out the `class()` of the object returned by `str_split_fixed()`. What do you learn? Take a look at help pages for `matrix` and  `array` to learn more about the returned objects. 

If the to-be-split variable lives in a data frame, `tidyr::separate()` will split it into 2 or more variables.

```{r}
my_fruit_df <- tibble(fruit)
my_fruit_df |> 
  separate(fruit, into = c("pre", "post"), sep = " ") |> 
  print(n = 10)
```

Take a close look at the returned data frame and make sure you understand what `separate()` is doing. 

### Collapse a vector

You can collapse a character vector of length `n > 1` to a single string with `str_c()`.

Give it shot by running the code below:

```{r}
head(fruit) |> 
  str_c(collapse = ", ")
```

### Create a character vector by catenating multiple vectors {#catenate-vectors}

If you have two or more character vectors of the same length, you can glue them together element-wise, to get a new vector of that length. Here are some ... awful smoothie flavors?

```{r}
str_c(fruit[1:4], fruit[5:8], sep = " & ")
```

Element-wise catenation can be combined with collapsing.

```{r}
str_c(fruit[1:4], fruit[5:8], sep = " & ", collapse = ", ")
```

If the to-be-combined vectors are variables in a data frame, you can use `tidyr::unite()` to make a single new variable from them.

```{r}
fruit_df <- tibble(
  fruit1 = fruit[1:4],
  fruit2 = fruit[5:8]
)

fruit_df |>  
  unite("flavor_combo", fruit1, fruit2, sep = " & ")

```


## I want to do more!

* Work through the [stringr](https://cran.r-project.org/web/packages/stringr/vignettes/stringr.html) vignette. 
* Explore the [glue](https://glue.tidyverse.org/) package.
* Learn more about regular expressions by completing [this](https://regexone.com/) tutorial. 






