---
title: "Homework 3"
format: gfm
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
```

### Overview

The goal of homework 3 is to learn more about `join` functions and explore `case_when`.

To learn about these tools, you will work on a common data wrangling task: recoding variables.

### Recoding variables

When working with data from psychology studies, you might find yourself faced with a dataset that looks a little like the one printed below. You have 15 participants who have answered a question using a 1-5 scale ranging from Strongly Disagree to Strongly Agree.

```{r}
#| echo: false
data_df <- 
	tibble(ps_id = 1:15, 
					q1 = sample(c("Strongly Agree", 
																 "Agree",
																 "Undecided",
																 "Disagree",
																 "Strongly Disagree"), 1, size = 15))
```

```{r}
data_df
```

You need to recode the `q1` variable to numeric values to use it in an analysis.

#### `left_join()`

The `left_join()` function can help you recode data.  

The first step is to create what is sometimes called a look-up table. This is a small table that you will join with the data frame that contains participant responses. 

To make a look-up table, you need to generate a data frame. There are lots of ways to make your very own data frame (`data.frame()`, `tibble()`, `tribble()`, etc). To learn more about `tibble()` and `tribble()`, read tibble documentation [tibbles](https://tibble.tidyverse.org/).

I'll use `tribble()` because I think it results in the most readable code. 

Notice the correspondence between the column names in `data_df` and `coding_df`.


```{r}
coding_df <- 
tribble(
  ~q1,           ~q1_num,
  "Strongly Agree",    5,
  "Agree",             4,
  "Undecided",         3,
  "Disagree",          2,
  "Strongly Disagree", 1
)

coding_df
```
##### Watch the recoding magic!

```{r}
left_join(data_df, coding_df)
```

We can clean up our data frame by removing the `q1` column. 

```{r}
left_join(data_df, coding_df) |> 
  select(!q1)
```

This is how you can use `left_join()` to recode data. 

#### `case_when()`

The other common approach for recoding data is to use `case_when()` from the `dplyr` package.


Here is how I would recode a variable using `case_when()`.

```{r}
data_df |> 
  mutate(q1 = case_when(q1 == "Strongly Agree" ~ 5, 
                        q1 == "Agree" ~ 4, 
                        q1 == "Undecided" ~ 3,
                        q1 == "Disagree" ~ 2,
                        q1 == "Strongly Disagree" ~ 1))
```

We haven't covered `case_when()` the course, so part of this homework will be discovering how it works.  You can learn about `case_when()` [here](https://dplyr.tidyverse.org/reference/case_when.html) and [here](https://rafalab.github.io/dsbook/tidyverse.html#tidyverse-conditionals).

### Your mission, high-level

Write a tutorial demonstrating these two approaches to recoding variables using a dataset we haven't covered in the course. I've provided a list of potential datasets below, but you should feel free to find our own.

Your tutorial should teach someone how to recode data using `left_join()` and `case_when()`. You can assume that person is in our course and knows as much *R* as we've covered thus far.

### The specifics

Teach someone how to use `left_join()` and `case_when()` to recode data in R. 

Compare the two approaches. Do you like one approach better than the other? 

How would you recode 10 variables (assuming they all had the same response options)? Can you demonstrate an efficient approach to doing this? Compare and contrast `case_when()` and `left_join()` for recoding multiple variables.

I demonstrated recoding text data into numeric data. Can you show me how to do the reverse?

### I want to do more!

What if you needed to recode 100 variables? To complicate things further, the 100 variables don't all use the same response options - some variables use Strongly agree (5) - Strong disagree (1) and others use Yes(1) - No (0), etc. Hint: `pivot` functions might be important to solving this. 

Show me how you'd deal with this. To demonstrate, you might try [simulating](https://r-vogg-blog.netlify.app/posts/2020-10-09-data-simulation/) a dataset with 100 variables and several different response options (take a look at the Qmd for this homework to see how I made `data_df` above). You'd then use that simulated data to demonstrate your recoding strategy. 

Check out the [`learnr package`](https://rstudio.github.io/learnr/) to make your tutorial interactive.

### Report your process

You're encouraged to reflect on what was hard/easy, problems you solved, helpful tutorials you read, etc. Give credit to your sources, whether it's a blog post, a fellow student, an online tutorial, etc.


### Interesting dataset

The [`fivethirtyeight`](https://github.com/rudeboybert/fivethirtyeight) pakage gives you access to 19 datasets. 

`starwars`, this dataset is part of `tidyverse()`. Load `tidyverse` and type `starwars`.

[The Great British Bake Off](https://bakeoff.netlify.app/)

[And so many more great datasets!](https://github.com/tacookson/data)


### Rubric

As always, refer to the [general rubric](general-rubric.md) for guidelines on how we'll be grading.

Check minus: Didn't do much more than reproduce what I demonstrated at the start of the homework (i.e., you recoded 1 variable using `left_join` and `case_when`). The tutorial is difficult to understand. There is no obvious effort to find an efficient way to recode 10 variables or to recode from numeric to text data. Or more than one technical problem that is relatively easy to fix. It's hard to find the report in your Rproject folder

Check: Hits all the elements. No obvious mistakes. Pleasant to read. No heroic detective work required. Solid.

Check plus: Exceeded the requirements in a number of tasks. Or developed novel approaches that were indeed interesting and "worked". Impressive use of `dplyr` and `tidyr` to meet the goals of the assignment. Impeccable organization of your report. We learned something new from reviewing your work and are eager to incorporate it into our own work.

